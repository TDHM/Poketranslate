import pandas as pd
import unidecode

def make_dict_str_to_hex(tbl_data: str) -> dict:
    """Make a conversion dictionary from a .tbl conversion table

    Args:
        short_conversion_table (str): ROM .tbl file as a string

    Returns:
        dict: Dictionary used to convert strings back to hex
    """     
    dict_table = {}

    for lines in tbl_data.split("\n"):
        splitted_line = lines.split("=")
        hex_value = splitted_line[0]
        ascii_value = splitted_line[1]
        dict_table[ascii_value] = hex_value

    return dict_table


def get_encoding(word: str, dict_table: dict) -> str:
    """Translates ASCII text into HEX using provided dict_table generated by make_dict_str_to_hex

    Args:
        word (str): Text to be translated to HEX
        dict_table (dict): Dict_table generated by make_dict_str_to_hex

    Returns:
        str: Converted HEX in a string
    """
    #word = word.replace("'", "").replace("♀", "").replace("♂", "").replace(".", " ").replace("Î", "I").replace("Ô", "O").replace("Ç", "C").replace("Û", "U").replace("Â", "A").replace("ô", "o").replace("È", "E").replace("Ï", "I").replace("Ê", "E").replace("À", "A").replace("œ", "oe").replace("ç", "c").replace("û", "u").replace("Œ", "Oe").replace("â", "a").replace("î", "i").replace("à", "a").replace("é", "e").replace("è", "e").replace("ê", "e").replace("É", "E").replace("ï", "i") # Farfetch'd is not translated into Canarticho, Mr. Mime stays
    hex_encoding = ""
    for letter in word:
        if letter in dict_table.keys():
            hex_encoding += dict_table[letter]
        else:
            normalized_letter = unidecode.unidecode(letter)
            if normalized_letter in dict_table.keys():
                hex_encoding += dict_table[normalized_letter]
            
    return hex_encoding.upper()


def get_decoding(hex_input: str, full_conversion_table: pd.DataFrame) -> str:
    """Translated HEX into ASCII using provided full_conversion_table (.tbl imported as Pandas DataFrame)

    Args:
        hex_input (str): String containing HEX text to be translated
        full_conversion_table (pd.DataFrame): Full conversion table (.tbl imported as Pandas DataFrame)


    Returns:
        str: Converted ASCII into HEX
    """
    word = ""
    i = 0
    while i < len(hex_input)-1:
        first_hex = hex_input[0]
        second_hex = hex_input[1]
        decoded_value = full_conversion_table.loc[first_hex][second_hex]
        word += decoded_value[i:i+2]
        i += 2
    return word

### Ci dessous à déplacer dans les classes PKM et MOVES ###


def pad_pkm_hex_gen_2(hex_value):
    # in gen 2, < 10 bytes Pokémon names are padded with hex 50

    nb_bytes = len(hex_value)//2
    nb_pads_needed = 10-nb_bytes
    padded_hex_value = hex_value

    for i in range(nb_pads_needed):
        padded_hex_value += "50"

    return padded_hex_value


def match_moves_length_hex(hex_value_source, hex_value_dest):
    nb_bytes_source = len(hex_value_source)//2
    nb_bytes_dest = len(hex_value_dest)//2
    nb_bytes_diff = nb_bytes_source - nb_bytes_dest

    if nb_bytes_diff > 0:
        for i in range(nb_bytes_diff):
            hex_value_dest += "7F"
    else:
        hex_value_dest = hex_value_dest[:len(hex_value_source)]

    return hex_value_dest
